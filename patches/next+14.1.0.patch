diff --git a/node_modules/next/dist/client/link.js b/node_modules/next/dist/client/link.js
index 4157408..8e85333 100644
--- a/node_modules/next/dist/client/link.js
+++ b/node_modules/next/dist/client/link.js
@@ -105,30 +105,43 @@ function formatStringOrUrl(urlObjOrString) {
  * React Component that enables client-side transitions between routes.
  */ const Link = /*#__PURE__*/ _react.default.forwardRef(function LinkComponent(props, forwardedRef) {
     let children;
-    const { href: hrefProp, as: asProp, children: childrenProp, prefetch: prefetchProp = null, passHref, replace, shallow, scroll, locale, onClick, onMouseEnter: onMouseEnterProp, onTouchStart: onTouchStartProp, legacyBehavior = false, ...restProps } = props;
+    const { 
+        href: hrefProp, 
+        as: asProp, 
+        children: childrenProp, 
+        prefetch: prefetchProp = null, 
+        passHref, 
+        replace, 
+        shallow, 
+        scroll, 
+        locale, 
+        onClick, 
+        onMouseEnter: onMouseEnterProp, 
+        onTouchStart: onTouchStartProp, 
+        legacyBehavior = true, // Set default to true
+        ...restProps 
+    } = props;
+
     children = childrenProp;
     if (legacyBehavior && (typeof children === "string" || typeof children === "number")) {
         children = /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
             children: children
         });
     }
+
     const pagesRouter = _react.default.useContext(_routercontextsharedruntime.RouterContext);
     const appRouter = _react.default.useContext(_approutercontextsharedruntime.AppRouterContext);
     const router = pagesRouter != null ? pagesRouter : appRouter;
-    // We're in the app directory if there is no pages router.
     const isAppRouter = !pagesRouter;
     const prefetchEnabled = prefetchProp !== false;
-    /**
-     * The possible states for prefetch are:
-     * - null: this is the default "auto" mode, where we will prefetch partially if the link is in the viewport
-     * - true: we will prefetch if the link is visible and prefetch the full page, not just partially
-     * - false: we will not prefetch if in the viewport at all
-     */ const appPrefetchKind = prefetchProp === null ? _routerreducertypes.PrefetchKind.AUTO : _routerreducertypes.PrefetchKind.FULL;
+    
+    const appPrefetchKind = prefetchProp === null ? _routerreducertypes.PrefetchKind.AUTO : _routerreducertypes.PrefetchKind.FULL;
+
     if (process.env.NODE_ENV !== "production") {
         function createPropError(args) {
             return new Error("Failed prop type: The prop `" + args.key + "` expects a " + args.expected + " in `<Link>`, but got `" + args.actual + "` instead." + (typeof window !== "undefined" ? "\nOpen your browser's console to view the Component stack trace." : ""));
         }
-        // TypeScript trick for type-guarding:
+
         const requiredPropsGuard = {
             href: true
         };
@@ -143,12 +156,10 @@ function formatStringOrUrl(urlObjOrString) {
                     });
                 }
             } else {
-                // TypeScript trick for type-guarding:
-                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                 const _ = key;
             }
         });
-        // TypeScript trick for type-guarding:
+
         const optionalPropsGuard = {
             as: true,
             replace: true,
@@ -198,19 +209,17 @@ function formatStringOrUrl(urlObjOrString) {
                     });
                 }
             } else {
-                // TypeScript trick for type-guarding:
-                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                 const _ = key;
             }
         });
-        // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes
-        // eslint-disable-next-line react-hooks/rules-of-hooks
+
         const hasWarned = _react.default.useRef(false);
         if (props.prefetch && !hasWarned.current && !isAppRouter) {
             hasWarned.current = true;
             console.warn("Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated");
         }
     }
+
     if (process.env.NODE_ENV !== "production") {
         if (isAppRouter && !asProp) {
             let href;
@@ -227,6 +236,7 @@ function formatStringOrUrl(urlObjOrString) {
             }
         }
     }
+
     const { href, as } = _react.default.useMemo(()=>{
         if (!pagesRouter) {
             const resolvedHref = formatStringOrUrl(hrefProp);
@@ -245,9 +255,10 @@ function formatStringOrUrl(urlObjOrString) {
         hrefProp,
         asProp
     ]);
+
     const previousHref = _react.default.useRef(href);
     const previousAs = _react.default.useRef(as);
-    // This will return the first child, if multiple are provided it will throw an error
+
     let child;
     if (legacyBehavior) {
         if (process.env.NODE_ENV === "development") {
@@ -275,12 +286,13 @@ function formatStringOrUrl(urlObjOrString) {
             }
         }
     }
+
     const childRef = legacyBehavior ? child && typeof child === "object" && child.ref : forwardedRef;
     const [setIntersectionRef, isVisible, resetVisible] = (0, _useintersection.useIntersection)({
         rootMargin: "200px"
     });
+
     const setRef = _react.default.useCallback((el)=>{
-        // Before the link getting observed, check if visible state need to be reset
         if (previousAs.current !== as || previousHref.current !== href) {
             resetVisible();
             previousAs.current = as;
@@ -300,20 +312,17 @@ function formatStringOrUrl(urlObjOrString) {
         resetVisible,
         setIntersectionRef
     ]);
-    // Prefetch the URL if we haven't already and it's visible.
+
     _react.default.useEffect(()=>{
-        // in dev, we only prefetch on hover to avoid wasting resources as the prefetch will trigger compiling the page.
         if (process.env.NODE_ENV !== "production") {
             return;
         }
         if (!router) {
             return;
         }
-        // If we don't need to prefetch the URL, don't do prefetch.
         if (!isVisible || !prefetchEnabled) {
             return;
         }
-        // Prefetch the URL.
         prefetch(router, href, as, {
             locale
         }, {
@@ -330,6 +339,7 @@ function formatStringOrUrl(urlObjOrString) {
         isAppRouter,
         appPrefetchKind
     ]);
+
     const childProps = {
         ref: setRef,
         onClick (e) {
@@ -368,7 +378,6 @@ function formatStringOrUrl(urlObjOrString) {
             prefetch(router, href, as, {
                 locale,
                 priority: true,
-                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}
                 bypassPrefetchedCheck: true
             }, {
                 kind: appPrefetchKind
@@ -390,31 +399,28 @@ function formatStringOrUrl(urlObjOrString) {
             prefetch(router, href, as, {
                 locale,
                 priority: true,
-                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}
                 bypassPrefetchedCheck: true
             }, {
                 kind: appPrefetchKind
             }, isAppRouter);
         }
     };
-    // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is
-    // defined, we specify the current 'href', so that repetition is not needed by the user.
-    // If the url is absolute, we can bypass the logic to prepend the domain and locale.
+
     if ((0, _utils.isAbsoluteUrl)(as)) {
         childProps.href = as;
     } else if (!legacyBehavior || passHref || child.type === "a" && !("href" in child.props)) {
         const curLocale = typeof locale !== "undefined" ? locale : pagesRouter == null ? void 0 : pagesRouter.locale;
-        // we only render domain locales if we are currently on a domain locale
-        // so that locale links are still visitable in development/preview envs
         const localeDomain = (pagesRouter == null ? void 0 : pagesRouter.isLocaleDomain) && (0, _getdomainlocale.getDomainLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.locales, pagesRouter == null ? void 0 : pagesRouter.domainLocales);
         childProps.href = localeDomain || (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.defaultLocale));
     }
+
     return legacyBehavior ? /*#__PURE__*/ _react.default.cloneElement(child, childProps) : /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
         ...restProps,
         ...childProps,
         children: children
     });
 });
+
 const _default = Link;
 
 if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
